AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Data Pipeline



Parameters:
  FirehoseS3Prefix:
    Type: String
    Default: firehose/
    Description: "The S3 Key prefix for Kinesis Firehose."
  FirehoseBufferingInterval:
    Type: Number
    Default: 60
    MinValue: 60
    MaxValue: 900
    Description: "How long Firehose will wait before writing a new batch into S3"
  FirehoseBufferingSize:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 128
    Description: "Maximum batch size in MB"
  LambdaTimeout:
    Type: Number
    Default: 300
    MinValue: 5
    MaxValue: 300
    Description: "Maximum Lambda execution time in seconds"
  LambdaMemorySize:
    Type: String
    Default: 1024
    AllowedValues: [128,192,256,320,384,448,512,576,640,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408,1472,1536]

Globals:
  Function:
    Layers:
      - !Ref ProductCoreLayer

Resources:

  EventsAWSApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: Events API
      StageName: sandbox
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: GatewayAuthorization

  LambdaCatalogAPI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: catalog_api/
      Handler: main.lambda_handler
      Runtime: python3.8
      Policies:
        - AmazonS3FullAccess
        - AmazonDynamoDBFullAccess
      Events:
        CatalogAPI:
          Type: Api
          Properties:
            RestApiId: !Ref EventsAWSApiGateway
            Path: /product
            Method: GET
  
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: catalog_attr
      AttributeDefinitions:
        - AttributeName: product_id
          AttributeType: S
      KeySchema:
        - AttributeName: product_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ProductCoreLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: collector-dependencies
      Description: Dependencies for sam app [sam-with-layers]
      ContentUri: .aws-sam/build/collector-dependencies
      CompatibleRuntimes:
        - python3.8
        - python3.9


  DeliveryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: voga-firehose-events-recorder
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    Export:
      Name: bucket_name
      

  EventsDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: events_dispatcher/
      Handler: main.lambda_handler
      Runtime: python3.8
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref DeliveryBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: firehose/
      Policies:
        - AmazonS3FullAccess
  
  LoadTest:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: load_test/
      Handler: main.lambda_handler
      Runtime: python3.8
      Timeout: 900
      MemorySize: !Ref LambdaMemorySize
      Policies:
        - AmazonKinesisFirehoseFullAccess

  CatalogTransform:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: catalog_transform/
      Handler: main.lambda_handler
      Runtime: python3.8
      Timeout: 900
      MemorySize: !Ref LambdaMemorySize
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref DeliveryBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: apps/catalog/
      Policies:
        - AmazonS3FullAccess
        - AmazonDynamoDBFullAccess

  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - DeliveryStreamPolicy
    Properties:
      DeliveryStreamType: DirectPut
      DeliveryStreamName: Events_recorder_stream
      ExtendedS3DestinationConfiguration:
        Prefix: !Ref FirehoseS3Prefix
        BucketARN: !GetAtt DeliveryBucket.Arn
        BufferingHints:
          IntervalInSeconds: !Ref FirehoseBufferingInterval
          SizeInMBs: !Ref FirehoseBufferingSize
        CompressionFormat: UNCOMPRESSED
        RoleARN: !GetAtt DeliveryStreamRole.Arn

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  DeliveryStreamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref DeliveryStreamRole
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt DeliveryBucket.Arn
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DeliveryBucket
                  - '*'

Outputs:
  ApiGateway:
    Description: "The URL is:"
    Value: !Sub "https://${EventsAWSApiGateway}.execute-api.${AWS::Region}.amazonaws.com/sandbox/product"

  DeliveryStreamName:
    Value: !Ref DeliveryStream

  BucketName:
    Description: The bucket where data will be stored
    Value: !Ref DeliveryBucket